// <auto-generated />
using System;
using FinanceTrackerApi.Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinanceTrackerApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250616094201_FixCascadePaths")]
    partial class FixCascadePaths
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.DebtEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreditorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeadLine")
                        .HasColumnType("datetime2");

                    b.Property<int>("DebtorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreditorId");

                    b.HasIndex("DebtorId");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.IncomeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfIncome")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceOfIncome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransactionSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionSourceId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.ItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitOfMeasure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PaymentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DebtEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DebtEntityId");

                    b.HasIndex("TransactionSourceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PurchaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionSourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransactionSourceId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PurchasedItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PurchaseEntityId");

                    b.ToTable("PurchasedItems");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.TransactionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParticipantId");

                    b.ToTable("Trasnactions");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.TransactionParticipantEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsVirtual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransactionParticipants");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.TransactionSourceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FromId")
                        .HasColumnType("int");

                    b.Property<int>("ToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("TransactionSources");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.DebtEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionParticipantEntity", "Creditor")
                        .WithMany()
                        .HasForeignKey("CreditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionParticipantEntity", "Debtor")
                        .WithMany()
                        .HasForeignKey("DebtorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("FinanceTrackerApi.DataAccess.Entities.MoneyEntity", "Loan", b1 =>
                        {
                            b1.Property<int>("DebtEntityId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Loan_Amount");

                            b1.Property<string>("CurrencyISO")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Loan_CurrencyISO");

                            b1.HasKey("DebtEntityId");

                            b1.ToTable("Debts");

                            b1.WithOwner()
                                .HasForeignKey("DebtEntityId");
                        });

                    b.Navigation("Creditor");

                    b.Navigation("Debtor");

                    b.Navigation("Loan")
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.IncomeEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionSourceEntity", "TransactionSource")
                        .WithMany()
                        .HasForeignKey("TransactionSourceId");

                    b.Navigation("TransactionSource");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PaymentEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.DebtEntity", null)
                        .WithMany("Payments")
                        .HasForeignKey("DebtEntityId");

                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionSourceEntity", "TransactionSource")
                        .WithMany()
                        .HasForeignKey("TransactionSourceId");

                    b.Navigation("TransactionSource");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PurchaseEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionSourceEntity", "TransactionSource")
                        .WithMany()
                        .HasForeignKey("TransactionSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionSource");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PurchasedItemEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.ItemEntity", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.PurchaseEntity", null)
                        .WithMany("PurchasedItems")
                        .HasForeignKey("PurchaseEntityId");

                    b.OwnsOne("FinanceTrackerApi.DataAccess.Entities.MoneyEntity", "Price", b1 =>
                        {
                            b1.Property<int>("PurchasedItemEntityId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Price_Amount");

                            b1.Property<string>("CurrencyISO")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Price_Currency");

                            b1.HasKey("PurchasedItemEntityId");

                            b1.ToTable("PurchasedItems");

                            b1.WithOwner()
                                .HasForeignKey("PurchasedItemEntityId");
                        });

                    b.Navigation("Item");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.TransactionEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionParticipantEntity", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FinanceTrackerApi.DataAccess.Entities.MoneyEntity", "TransactionAmount", b1 =>
                        {
                            b1.Property<int>("TransactionEntityId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("Transaction_Amount");

                            b1.Property<string>("CurrencyISO")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Transaction_Currency");

                            b1.HasKey("TransactionEntityId");

                            b1.ToTable("Trasnactions");

                            b1.WithOwner()
                                .HasForeignKey("TransactionEntityId");
                        });

                    b.Navigation("Participant");

                    b.Navigation("TransactionAmount");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.TransactionSourceEntity", b =>
                {
                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionEntity", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinanceTrackerApi.DataAccess.Entities.TransactionEntity", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.DebtEntity", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FinanceTrackerApi.DataAccess.Entities.PurchaseEntity", b =>
                {
                    b.Navigation("PurchasedItems");
                });
#pragma warning restore 612, 618
        }
    }
}
